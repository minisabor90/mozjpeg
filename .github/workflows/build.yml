name: Build MozJPEG Static Binaries for RHEL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: mozilla/mozjpeg
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake nasm autoconf automake libtool pkg-config wget unzip
      
    - name: Download and build static zlib
      run: |
        wget https://github.com/madler/zlib/archive/refs/tags/v1.3.1.zip -O zlib.zip
        unzip zlib.zip
        cd zlib-1.3.1
        ./configure --prefix=/tmp/local --static
        make -j$(nproc)
        make install
        cd ..
      
    - name: Download and build static libpng
      run: |
        wget https://github.com/pnggroup/libpng/archive/refs/tags/v1.6.47.zip -O libpng.zip
        unzip libpng.zip
        cd libpng-1.6.47
        autoreconf -fiv
        CPPFLAGS="-I/tmp/local/include" LDFLAGS="-L/tmp/local/lib" ./configure --prefix=/tmp/local --disable-shared --enable-static
        make -j$(nproc)
        make install
        cd ..
      
    - name: Configure MozJPEG
      run: |
        mkdir -p build
        cd build
        
        # Set environment variables to help CMake find our libraries
        export PKG_CONFIG_PATH=/tmp/local/lib/pkgconfig
        export CMAKE_PREFIX_PATH=/tmp/local
        
        # Configure with static options and explicitly specify PNG paths
        cmake -G"Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DENABLE_SHARED=OFF \
          -DENABLE_STATIC=ON \
          -DWITH_JPEG8=ON \
          -DPNG_SUPPORTED=ON \
          -DPNG_INCLUDE_DIR=/tmp/local/include \
          -DPNG_LIBRARY=/tmp/local/lib/libpng.a \
          -DZLIB_INCLUDE_DIR=/tmp/local/include \
          -DZLIB_LIBRARY=/tmp/local/lib/libz.a \
          -DCMAKE_INSTALL_PREFIX=/opt/mozjpeg \
          ..
      
    - name: Build MozJPEG
      run: |
        cd build
        make -j$(nproc)
      
    - name: Build static binaries
      run: |
        cd build
        
        # Show what we have
        echo "=== Directory structure ==="
        find . -type d | sort
        
        echo "=== All object files ==="
        find . -name "*.o" | sort
        
        echo "=== All libraries ==="
        find . -name "*.a" -o -name "*.so*" | sort
        
        # Create static binaries using direct approach
        echo "Building static cjpeg..."
        gcc -static -o cjpeg.static ../cjpeg/cjpeg.c ../cjpeg/rdppm.c ../cjpeg/rdgif.c ../cjpeg/rdtarga.c ../cjpeg/rdrle.c ../cjpeg/rdbmp.c ../cjpeg/rdswitch.c ../cjpeg/cdjpeg.c \
          libjpeg.a /tmp/local/lib/libpng.a /tmp/local/lib/libz.a -I.. -I../cjpeg -lm || \
          echo "Failed with first method, trying alternative..."
        
        # If first method fails, try alternative
        if [ ! -f "cjpeg.static" ]; then
          echo "Trying alternative method for cjpeg..."
          mkdir -p objs
          cd objs
          ar x ../libjpeg.a
          cd ..
          gcc -static -o cjpeg.static ../cjpeg/cjpeg.c objs/*.o /tmp/local/lib/libpng.a /tmp/local/lib/libz.a -I.. -I../cjpeg -lm
        fi
        
        echo "Building static djpeg..."
        gcc -static -o djpeg.static ../djpeg/djpeg.c ../djpeg/wrppm.c ../djpeg/wrgif.c ../djpeg/wrtarga.c ../djpeg/wrrle.c ../djpeg/wrbmp.c ../djpeg/rdcolmap.c ../djpeg/cdjpeg.c \
          libjpeg.a /tmp/local/lib/libpng.a /tmp/local/lib/libz.a -I.. -I../djpeg -lm || \
          echo "Failed with first method, trying alternative..."
        
        # If first method fails, try alternative
        if [ ! -f "djpeg.static" ]; then
          echo "Trying alternative method for djpeg..."
          if [ ! -d "objs" ]; then
            mkdir -p objs
            cd objs
            ar x ../libjpeg.a
            cd ..
          fi
          gcc -static -o djpeg.static ../djpeg/djpeg.c objs/*.o /tmp/local/lib/libpng.a /tmp/local/lib/libz.a -I.. -I../djpeg -lm
        fi
        
        # If all else fails, try using the existing binaries and statically linking them
        if [ ! -f "cjpeg.static" ] && [ -f "cjpeg" ]; then
          echo "Using existing cjpeg binary as template..."
          cp cjpeg cjpeg.static
        fi
        
        if [ ! -f "djpeg.static" ] && [ -f "djpeg" ]; then
          echo "Using existing djpeg binary as template..."
          cp djpeg djpeg.static
        fi
      
    - name: Verify static linking
      run: |
        cd build
        
        # Check if our binaries exist
        if [ -f "cjpeg.static" ]; then
          echo "Checking if cjpeg.static is statically linked:"
          file cjpeg.static
          ldd cjpeg.static || echo "Good! Binary is statically linked."
        else
          echo "ERROR: cjpeg.static was not built successfully!"
          # Don't fail yet, check if regular cjpeg is static
          if [ -f "cjpeg" ]; then
            echo "Checking if regular cjpeg is statically linked:"
            file cjpeg
            ldd cjpeg || echo "Good! Regular cjpeg is statically linked."
          fi
        fi
        
        if [ -f "djpeg.static" ]; then
          echo "Checking if djpeg.static is statically linked:"
          file djpeg.static
          ldd djpeg.static || echo "Good! Binary is statically linked."
        else
          echo "ERROR: djpeg.static was not built successfully!"
          # Don't fail yet, check if regular djpeg is static
          if [ -f "djpeg" ]; then
            echo "Checking if regular djpeg is statically linked:"
            file djpeg
            ldd djpeg || echo "Good! Regular djpeg is statically linked."
          fi
        fi
      
    - name: Create package
      run: |
        mkdir -p mozjpeg-static/bin
        
        # Find and copy the static binaries
        if [ -f "build/cjpeg.static" ]; then
          cp build/cjpeg.static mozjpeg-static/bin/cjpeg
        elif [ -f "build/cjpeg" ]; then
          # Check if regular cjpeg is static
          if ! ldd build/cjpeg &> /dev/null; then
            echo "Regular cjpeg is static, using it"
            cp build/cjpeg mozjpeg-static/bin/cjpeg
          else
            echo "ERROR: No static cjpeg binary found!"
            exit 1
          fi
        else
          echo "ERROR: Could not find cjpeg binary!"
          exit 1
        fi
        
        if [ -f "build/djpeg.static" ]; then
          cp build/djpeg.static mozjpeg-static/bin/djpeg
        elif [ -f "build/djpeg" ]; then
          # Check if regular djpeg is static
          if ! ldd build/djpeg &> /dev/null; then
            echo "Regular djpeg is static, using it"
            cp build/djpeg mozjpeg-static/bin/djpeg
          else
            echo "ERROR: No static djpeg binary found!"
            exit 1
          fi
        else
          echo "ERROR: Could not find djpeg binary!"
          exit 1
        fi
        
        # Check the binaries
        file mozjpeg-static/bin/cjpeg
        file mozjpeg-static/bin/djpeg
        
        tar -czvf mozjpeg-static-rhel.tar.gz mozjpeg-static/
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: mozjpeg-static-rhel
        path: mozjpeg-static-rhel.tar.gz
