name: Build MozJPEG Static Binaries for RHEL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # Using Rocky Linux 8 container which is binary compatible with RHEL 8
      image: rockylinux/rockylinux:8

    steps:
    - name: Install dependencies
      run: |
        # Enable PowerTools repository for some dependencies
        dnf install -y dnf-plugins-core
        dnf config-manager --set-enabled powertools
        
        # Install build dependencies
        dnf install -y epel-release
        dnf install -y gcc gcc-c++ make cmake nasm autoconf automake libtool pkgconfig wget unzip tar gzip
        
        # Install static libraries needed for fully static linking
        dnf install -y glibc-static libstdc++-static zlib-static

    - name: Download and build static zlib
      run: |
        wget https://github.com/madler/zlib/archive/refs/tags/v1.3.1.zip -O zlib.zip
        unzip zlib.zip
        cd zlib-1.3.1
        ./configure --prefix=/tmp/local --static
        make -j$(nproc)
        make install
        cd ..

    - name: Download and build static libpng
      run: |
        wget https://github.com/pnggroup/libpng/archive/refs/tags/v1.6.47.zip -O libpng.zip
        unzip libpng.zip
        cd libpng-1.6.47
        autoreconf -fiv
        CPPFLAGS="-I/tmp/local/include" LDFLAGS="-L/tmp/local/lib" \
          ./configure libpng_LIBS='/tmp/local/lib/libpng16.a -lz' --prefix=/tmp/local --disable-shared --enable-static
        make -j$(nproc)
        make install
        # Create a symlink so that libpng16.a is available as libpng.a
        cd /tmp/local/lib
        if [ ! -f libpng.a ]; then
          ln -s libpng16.a libpng.a
        fi

    - name: Download MozJPEG source v4.1.1
      run: |
        wget https://github.com/mozilla/mozjpeg/archive/refs/tags/v4.1.1.tar.gz -O mozjpeg.tar.gz
        tar -xzf mozjpeg.tar.gz

    - name: Configure MozJPEG (Static with PNG enabled)
      run: |
        cd mozjpeg-4.1.1
        mkdir -p build
        cd build
        # Set up environment variables so CMake can find our static libraries via pkg-config.
        export PKG_CONFIG_PATH=/tmp/local/lib/pkgconfig
        export CMAKE_PREFIX_PATH=/tmp/local
        cmake -G"Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DWITH_JPEG8=ON \
          -DPNG_SUPPORTED=ON \
          -DCMAKE_INSTALL_PREFIX=/opt/mozjpeg \
          -DCMAKE_C_FLAGS="-fPIC" \
          -DCMAKE_EXE_LINKER_FLAGS="-static" \
          ..

    - name: Build MozJPEG
      run: |
        cd mozjpeg-4.1.1/build
        make -j$(nproc) VERBOSE=1
        echo "=== Built files ==="
        find . -name "*.a" | sort
        find . -type f -executable | sort

    - name: Check binary compatibility
      run: |
        cd mozjpeg-4.1.1/build
        echo "Checking glibc dependencies for cjpeg-static:"
        ldd cjpeg-static || echo "Static binary with no dynamic dependencies"
        echo "Checking glibc version requirements:"
        objdump -T cjpeg-static | grep GLIBC_ || echo "No GLIBC dependencies found"

    - name: Prepare static binaries
      run: |
        cd mozjpeg-4.1.1/build
        if [ ! -f "cjpeg-static" ]; then
          echo "ERROR: cjpeg-static not found!"
          exit 1
        fi
        if [ ! -f "djpeg-static" ]; then
          echo "ERROR: djpeg-static not found!"
          exit 1
        fi
        echo "Static binaries are available."

    - name: Create package
      run: |
        cd mozjpeg-4.1.1
        mkdir -p mozjpeg-static/bin
        cp build/cjpeg-static mozjpeg-static/bin/cjpeg
        cp build/djpeg-static mozjpeg-static/bin/djpeg
        # Create the tarball in the repository root
        tar -czvf ../mozjpeg-static-rhel.tar.gz mozjpeg-static/

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: mozjpeg-static-rhel
        path: mozjpeg-static-rhel.tar.gz
