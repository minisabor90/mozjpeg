name: Build MozJPEG Static Binaries for RHEL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: mozilla/mozjpeg
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake nasm autoconf automake libtool pkg-config wget unzip
      
    - name: Download and build static zlib
      run: |
        wget https://github.com/madler/zlib/archive/refs/tags/v1.3.1.zip -O zlib.zip
        unzip zlib.zip
        cd zlib-1.3.1
        ./configure --prefix=/tmp/local --static
        make -j$(nproc)
        make install
        cd ..
      
    - name: Download and build static libpng
      run: |
        wget https://github.com/pnggroup/libpng/archive/refs/tags/v1.6.47.zip -O libpng.zip
        unzip libpng.zip
        cd libpng-1.6.47
        autoreconf -fiv
        CPPFLAGS="-I/tmp/local/include" LDFLAGS="-L/tmp/local/lib" ./configure --prefix=/tmp/local --disable-shared --enable-static
        make -j$(nproc)
        make install
        cd ..
      
    - name: Configure MozJPEG (Static Only)
      run: |
        mkdir -p build
        cd build
        
        # Set environment variables to help CMake find our libraries
        export PKG_CONFIG_PATH=/tmp/local/lib/pkgconfig
        export CMAKE_PREFIX_PATH=/tmp/local
        
        # Configure with ONLY static options and explicitly disable shared libraries
        cmake -G"Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DENABLE_SHARED=OFF \
          -DENABLE_STATIC=ON \
          -DWITH_JPEG8=ON \
          -DPNG_SUPPORTED=ON \
          -DPNG_INCLUDE_DIR=/tmp/local/include \
          -DPNG_LIBRARY=/tmp/local/lib/libpng.a \
          -DZLIB_INCLUDE_DIR=/tmp/local/include \
          -DZLIB_LIBRARY=/tmp/local/lib/libz.a \
          -DCMAKE_INSTALL_PREFIX=/opt/mozjpeg \
          -DCMAKE_C_FLAGS="-fPIC" \
          ..
      
    - name: Build MozJPEG
      run: |
        cd build
        make -j$(nproc) VERBOSE=1
        
        # Show what was built
        echo "=== Built files ==="
        find . -name "*.a" | sort
        find . -type f -executable | sort
      
    - name: Build static binaries
      run: |
        cd build
        
        # Check if we have the static libraries
        if [ ! -f "libjpeg.a" ]; then
          echo "ERROR: libjpeg.a not found!"
          exit 1
        fi
        
        # Create static binaries using the static libraries
        echo "Building static cjpeg..."
        gcc -static -o cjpeg.static ../cjpeg/cjpeg.c ../cjpeg/rdppm.c ../cjpeg/rdgif.c ../cjpeg/rdtarga.c ../cjpeg/rdrle.c ../cjpeg/rdbmp.c ../cjpeg/rdswitch.c ../cjpeg/cdjpeg.c \
          libjpeg.a /tmp/local/lib/libpng.a /tmp/local/lib/libz.a -I.. -I../cjpeg -lm
        
        echo "Building static djpeg..."
        gcc -static -o djpeg.static ../djpeg/djpeg.c ../djpeg/wrppm.c ../djpeg/wrgif.c ../djpeg/wrtarga.c ../djpeg/wrrle.c ../djpeg/wrbmp.c ../djpeg/rdcolmap.c ../djpeg/cdjpeg.c \
          libjpeg.a /tmp/local/lib/libpng.a /tmp/local/lib/libz.a -I.. -I../djpeg -lm
      
    - name: Verify static linking
      run: |
        cd build
        
        # Check if our binaries exist
        if [ -f "cjpeg.static" ]; then
          echo "Checking if cjpeg.static is statically linked:"
          file cjpeg.static
          ldd cjpeg.static || echo "Good! Binary is statically linked."
        else
          echo "ERROR: cjpeg.static was not built successfully!"
          exit 1
        fi
        
        if [ -f "djpeg.static" ]; then
          echo "Checking if djpeg.static is statically linked:"
          file djpeg.static
          ldd djpeg.static || echo "Good! Binary is statically linked."
        else
          echo "ERROR: djpeg.static was not built successfully!"
          exit 1
        fi
      
    - name: Create package
      run: |
        mkdir -p mozjpeg-static/bin
        
        # Copy the static binaries
        cp build/cjpeg.static mozjpeg-static/bin/cjpeg
        cp build/djpeg.static mozjpeg-static/bin/djpeg
        
        # Check the binaries
        file mozjpeg-static/bin/cjpeg
        file mozjpeg-static/bin/djpeg
        
        tar -czvf mozjpeg-static-rhel.tar.gz mozjpeg-static/
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: mozjpeg-static-rhel
        path: mozjpeg-static-rhel.tar.gz
